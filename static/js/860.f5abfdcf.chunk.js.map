{"version":3,"file":"static/js/860.f5abfdcf.chunk.js","mappings":"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","sources":["components/Rankings/RankingsList/RankingsList.styled.js","components/Rankings/RankingsList/RankingsListItem.jsx","components/Rankings/RankingsList/RankingsList.jsx","redux/nft/nftSelectors.js","hooks/useNfts.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    padding: 40px 0px;\r\n    background-color: ${p => p.theme.colors.secondary};\r\n`\r\n\r\nexport const InfoBar = styled.div`\r\n    padding: 12px 15px;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border: ${p => p.theme.borders.thin} ${p => p.theme.colors.caption};\r\n    border-radius: ${p => p.theme.radii.normal};\r\n    font-family: ${p => p.theme.fontFamily.secondary};\r\n    font-size: ${p => p.theme.fontSizes.caption};\r\n    line-height: ${p => p.theme.lineHeights.caption};\r\n    color: ${p => p.theme.colors.caption};\r\n    margin-bottom: 20px;\r\n\r\n    @media (min-width: 768px) {\r\n        font-size: ${p => p.theme.fontSizes.body};\r\n        line-height: ${p => p.theme.lineHeights.body};\r\n        padding: 12px 25px;\r\n    }\r\n\r\n    @media (min-width: 1280px) {\r\n        padding: 12px 30px;\r\n    }\r\n`\r\n\r\nexport const LeftWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n\r\n    @media (min-width: 768px) {\r\n        gap: 20px;\r\n    }\r\n\r\n    @media (min-width: 1280px) {\r\n        gap: ${p => p.gap ? p.gap : '20px'}\r\n    }\r\n`\r\n\r\nexport const RightWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 20px;\r\n`\r\n\r\nexport const InfoBarPart = styled.span`\r\n    width: ${p => p.w ? p.w : 'fit-content'};\r\n`\r\n\r\nexport const List = styled.ul`\r\n\r\n`\r\n\r\nexport const ListItem = styled.li`\r\n    opacity: ${p => p.show ? 1 : 0};\r\n    transform: ${p => p.show ? 'translate(0, 0)' : 'translate(0, 100%)'};\r\n    transition: all 500ms ease;\r\n    \r\n    &:not(:last-child) {\r\n        margin-bottom: 20px;\r\n    }\r\n`\r\n\r\nexport const ListItemLink = styled(NavLink)`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    background-color: ${p => p.theme.colors.main};\r\n    border-radius: ${p => p.theme.radii.normal};\r\n    font-family: ${p => p.theme.fontFamily.secondary};\r\n    font-size: ${p => p.theme.fontSizes.caption};\r\n    line-height: ${p => p.theme.lineHeights.caption};\r\n    padding: 12px 15px;\r\n\r\n    @media (min-width: 768px) {\r\n        font-size: ${p => p.theme.fontSizes.body};\r\n        line-height: ${p => p.theme.lineHeights.body};\r\n        padding: 14px 25px;\r\n    }\r\n\r\n    @media (min-width: 1280px) {\r\n        padding: 12px 20px;\r\n    }\r\n`\r\n\r\nexport const ListItemRank = styled.span`\r\n    color: ${p => p.theme.colors.caption};\r\n\r\n    @media (min-width: 1280px) {\r\n        display: flex;\r\n        width: 30px;\r\n        height: 30px;\r\n        justify-content: center;\r\n        align-items: center;\r\n        border-radius: ${p => p.theme.radii.round};\r\n        background-color: ${p => p.theme.colors.secondary};\r\n    }\r\n`\r\n\r\nexport const ListItemArtist = styled.div`\r\n    display: flex;\r\n    gap: 12px;\r\n    align-items: center;\r\n\r\n    @media (min-width: 1280px) {\r\n        gap: 20px;\r\n    }\r\n`\r\n\r\nexport const ArtistAvatar = styled.img`\r\n    width: 24px;\r\n    height: 24px;\r\n    border-radius: ${p => p.theme.radii.round};\r\n\r\n    @media (min-width: 1280px) {\r\n        width: 60px;\r\n        height: 60px;\r\n    }\r\n`\r\n\r\nexport const ArtistName = styled.p`\r\n    font-family: ${p => p.theme.fontFamily.main};\r\n    font-size: ${p => p.theme.fontSizes.body};\r\n    line-height: ${p => p.theme.lineHeights.body};\r\n\r\n    @media (min-width: 768px) {\r\n        font-size: ${p => p.theme.fontSizes.h5};\r\n        line-height: ${p => p.theme.lineHeights.h5};\r\n        font-weight: ${p => p.theme.fontWeights.bold};\r\n    }\r\n`\r\n\r\nexport const ListItemItem = styled.span`\r\n    width: 80px;\r\n    color: ${p => p.change ? p.theme.colors.confirmGreen : p.theme.colors.text};\r\n\r\n    @media (min-width: 768px) {\r\n        width: 100px;\r\n    }\r\n\r\n    @media (min-width: 1280px) {\r\n        width: 160px;\r\n    }\r\n`\r\n\r\nexport const NoInfo = styled.p`\r\n    padding: 60px 0;\r\n    font-size: ${p => p.theme.fontSizes.h3};\r\n    line-height: ${p => p.theme.lineHeights.h3}\r\n`","import { useMQ } from \"../../../hooks\";\r\nimport {\r\n    ListItem,\r\n    LeftWrapper,\r\n    RightWrapper,\r\n    ListItemLink,\r\n    ListItemRank,\r\n    ListItemArtist,\r\n    ArtistAvatar,\r\n    ArtistName,\r\n    ListItemItem\r\n} from \"./RankingsList.styled\";\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nexport const RankingsListItem = ({artist, index}) => {\r\n    const {ref, inView} = useInView({\r\n        threshold: 0.2,\r\n        triggerOnce: true\r\n    });\r\n    const {isDesktop, isMobile} = useMQ();\r\n    const {name, avatarUrl, created, createdVolume} = artist;\r\n\r\n    const volume = created.reduce((acc, item) => acc + parseInt(item.price), 0);\r\n\r\n    return (\r\n        <ListItem ref={ref} show={inView}>\r\n            <ListItemLink>\r\n                <LeftWrapper>\r\n                    <ListItemRank>{index + 1}</ListItemRank>\r\n                    <ListItemArtist>\r\n                        <ArtistAvatar src={avatarUrl} />\r\n                        <ArtistName>{name}</ArtistName>\r\n                    </ListItemArtist>\r\n                </LeftWrapper>\r\n                <RightWrapper>\r\n                    {!isMobile && <ListItemItem change='true'>0%</ListItemItem>}\r\n                    {isDesktop && <ListItemItem>{createdVolume}</ListItemItem>}\r\n                    <ListItemItem>{volume} ETH</ListItemItem>\r\n                </RightWrapper>\r\n            </ListItemLink>\r\n        </ListItem>\r\n    )\r\n}","import { useMQ, useUsers } from \"../../../hooks\";\r\nimport { Wrapper, InfoBar, LeftWrapper, RightWrapper, InfoBarPart, List, NoInfo } from \"./RankingsList.styled\";\r\nimport { PaddingWrapper } from \"../../BaseComponents/PaddingWrapper/PaddingWrapper.styled\";\r\nimport { RankingsListItem } from \"./RankingsListItem\";\r\n\r\nconst RankingsList = () => {\r\n    const {isDesktop, isTablet, isMobile} = useMQ();\r\n    const {rankings} = useUsers();\r\n\r\n    if (!rankings) {\r\n        return;\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <PaddingWrapper>\r\n                <InfoBar>\r\n                    <LeftWrapper gap='30px'>\r\n                        <InfoBarPart>#</InfoBarPart>\r\n                        <InfoBarPart>Artist</InfoBarPart>\r\n                    </LeftWrapper>\r\n                    <RightWrapper>\r\n                        {!isMobile && <InfoBarPart w={isDesktop ? '160px' : isTablet ? '100px' : '80px'}>Change</InfoBarPart>}\r\n                        {isDesktop && <InfoBarPart w={isDesktop ? '160px' : isTablet ? '100px' : '80px'}>NFTs Created</InfoBarPart>}\r\n                        <InfoBarPart w={isDesktop ? '160px' : isTablet ? '100px' : '80px'}>Volume</InfoBarPart>\r\n                    </RightWrapper>\r\n                </InfoBar>\r\n                <List>\r\n                    {rankings ?\r\n                        rankings.map((artist, index) => <RankingsListItem key={artist._id} artist={artist} index={index} />) :\r\n                        <NoInfo>We have no rankings yet...</NoInfo>\r\n                    }\r\n                </List>\r\n            </PaddingWrapper>\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default RankingsList;","export const getUsersNft = ({nfts}) => nfts.usersNft;\r\n\r\nexport const getAllNft = ({nfts}) => nfts.allNft;\r\n\r\nexport const getDetails = ({nfts}) => nfts.details;\r\n\r\nexport const getProfileNft = ({nfts}) => nfts.profileNft;\r\n\r\nexport const getAllCollections = ({nfts}) => nfts.allCollections;\r\n\r\nexport const getCollectionDetails = ({nfts}) => nfts.collectionDetails;\r\n\r\nexport const getNftsLoading = ({nfts}) => nfts.isLoading;\r\n\r\nexport const getHighlight = ({nfts}) => nfts.highlight;\r\n\r\nexport const getTrendingCollections = ({nfts}) => nfts.trendingCollections;\r\n\r\nexport const getTrendingNfts = ({nfts}) => nfts.trendingNfts;","import { useSelector } from \"react-redux\";\r\nimport {\r\n    getAllNft,\r\n    getUsersNft,\r\n    getDetails,\r\n    getProfileNft,\r\n    getTrendingCollections,\r\n    getHighlight,\r\n    getAllCollections,\r\n    getCollectionDetails,\r\n    getNftsLoading,\r\n    getTrendingNfts\r\n} from \"../redux/nft/nftSelectors\";\r\n\r\nexport const useNfts = () => {\r\n    const usersNft = useSelector(getUsersNft);\r\n    const allNft = useSelector(getAllNft);\r\n    const nftDetails = useSelector(getDetails);\r\n    const profileNft = useSelector(getProfileNft);\r\n    const allCollections = useSelector(getAllCollections);\r\n    const collectionDetails = useSelector(getCollectionDetails);\r\n    const nftsLoading = useSelector(getNftsLoading);\r\n    const highlight = useSelector(getHighlight);\r\n    const trendingCollections = useSelector(getTrendingCollections);\r\n    const trendingNfts = useSelector(getTrendingNfts);\r\n\r\n    return {\r\n        usersNft,\r\n        allNft,\r\n        nftDetails,\r\n        highlight,\r\n        profileNft,\r\n        trendingCollections,\r\n        allCollections,\r\n        collectionDetails,\r\n        nftsLoading,\r\n        trendingNfts\r\n    };\r\n};","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","p","theme","colors","secondary","InfoBar","_templateObject2","borders","thin","caption","radii","normal","fontFamily","fontSizes","lineHeights","body","LeftWrapper","_templateObject3","gap","RightWrapper","_templateObject4","InfoBarPart","_templateObject5","w","List","_templateObject6","ListItem","_templateObject7","show","ListItemLink","NavLink","_templateObject8","main","ListItemRank","_templateObject9","round","ListItemArtist","_templateObject10","ArtistAvatar","_templateObject11","ArtistName","_templateObject12","h5","fontWeights","bold","ListItemItem","_templateObject13","change","confirmGreen","text","NoInfo","_templateObject14","h3","RankingsListItem","_ref","artist","index","_useInView","useInView","threshold","triggerOnce","ref","inView","_useMQ","useMQ","isDesktop","isMobile","name","avatarUrl","created","createdVolume","volume","reduce","acc","item","parseInt","price","_jsx","children","_jsxs","src","isTablet","rankings","useUsers","PaddingWrapper","map","_id","getUsersNft","nfts","usersNft","getAllNft","_ref2","allNft","getDetails","_ref3","details","getProfileNft","_ref4","profileNft","getAllCollections","_ref5","allCollections","getCollectionDetails","_ref6","collectionDetails","getNftsLoading","_ref7","isLoading","getHighlight","_ref8","highlight","getTrendingCollections","_ref9","trendingCollections","getTrendingNfts","_ref10","trendingNfts","useNfts","useSelector","nftDetails","nftsLoading","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","filter","key","concat","root","has","set","toString","get","observe","element","callback","arguments","length","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","id","instance","thresholds","elements","observer","entries","forEach","entry","_elements$get","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","isPlainChildren","props","React","_state$entry","delay","rootMargin","skip","initialInView","onChange","_React$useState","_React$useState2","_slicedToArray","setRef","_React$useState3","_React$useState4","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}