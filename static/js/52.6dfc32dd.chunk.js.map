{"version":3,"file":"static/js/52.6dfc32dd.chunk.js","mappings":"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","sources":["components/NftsList/NftsList.styled.js","components/NftsList/NftListItem/NftListItem.styled.js","components/NftsList/NftListItem/NftListItem.jsx","components/NftsList/NftsList.jsx","redux/nft/nftSelectors.js","hooks/useNfts.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 30px;\r\n    overflow: hidden;\r\n\r\n    @media (min-width: 768px) {\r\n        flex-direction: row;\r\n        flex-wrap: wrap;\r\n        justify-content: center;\r\n    }\r\n\r\n    @media (min-width: 1280px) {\r\n        \r\n    }\r\n`\r\n\r\nexport const NoInfo = styled.p`\r\n    padding: 60px 0;\r\n    font-size: ${p => p.theme.fontSizes.h3};\r\n    line-height: ${p => p.theme.lineHeights.h3}\r\n`","import styled from \"styled-components\";\r\n\r\nexport const NftItem = styled.li`\r\n    cursor: pointer;\r\n    background-color: ${p => p.theme.colors.main};\r\n    width: 100%;\r\n    border-radius: ${p => p.theme.radii.normal};\r\n    opacity: ${p => p.show ? '1;' : '0;'};\r\n    transform: ${p => p.show ? 'translate(0, 0)' : 'translate(50%, 0)'};\r\n    transition: all 500ms ease;\r\n\r\n    @media (min-width: 768px) {\r\n        width: 330px;\r\n    }\r\n`\r\n\r\nexport const ImageWrapper = styled.div`\r\n    width: 100%;\r\n    height: 240px;\r\n    background: url(${p => p.imageUrl});\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n\r\n    @media (min-width: 768px) {\r\n        height: 295px;\r\n    }\r\n`\r\n\r\nexport const ImageSkeleton = styled.div`\r\n    width: 100%;\r\n    height: 240px;\r\n    background: transparent;\r\n`\r\n\r\nexport const InfoWrapper = styled.div`\r\n    padding: 20px 20px 25px 20px;\r\n\r\n    @media (min-width: 768px) {\r\n        padding: 20px 30px 25px 30px;\r\n    }\r\n`\r\n\r\nexport const Title = styled.h3`\r\n    font-size: ${p => p.theme.fontSizes.h5};\r\n    line-height: ${p => p.theme.lineHeights.h5};\r\n    font-weight: ${p => p.theme.fontWeights.bold};\r\n`\r\n\r\nexport const AuthorContainer = styled.div`\r\n    display: flex;\r\n    gap: 12px;\r\n    margin-bottom: 25px;\r\n`\r\n\r\nexport const Avatar = styled.img`\r\n    width: 24px;\r\n    height: 24px;\r\n    border-radius: ${p => p.theme.radii.round};\r\n`\r\n\r\nexport const Author = styled.p`\r\n    font-family: ${p => p.theme.fontFamily.secondary};\r\n`\r\n\r\nexport const PricesWrapper = styled.div`\r\n    font-family: ${p => p.theme.fontFamily.secondary};\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n\r\nexport const PriceWrapper = styled.div`\r\n\r\n`\r\n\r\nexport const PriceTitle = styled.p`\r\n    font-size: ${p => p.theme.fontSizes.caption};\r\n    line-height: ${p => p.theme.lineHeights.caption};\r\n    color: ${p => p.theme.colors.caption};\r\n    margin-bottom: 8px;\r\n`\r\n\r\nexport const PriceValue = styled.p`\r\n    font-size: ${p => p.theme.fontSizes.caption};\r\n    line-height: ${p => p.theme.lineHeights.caption};\r\n\r\n    @media (min-width: 768px) {\r\n        font-size: ${p => p.theme.fontSizes.body};\r\n        line-height: ${p => p.theme.lineHeights.body};\r\n    }\r\n`","import { NftItem,\r\n    ImageWrapper,\r\n    InfoWrapper,\r\n    Title,\r\n    AuthorContainer,\r\n    Avatar,\r\n    Author,\r\n    PricesWrapper,\r\n    PriceWrapper,\r\n    PriceTitle,\r\n    PriceValue,\r\n    ImageSkeleton } from \"./NftListItem.styled\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {toast} from 'react-toastify';\r\nimport { useUsers } from \"../../../hooks\";\r\n\r\nexport const NftListItem = ({nft}) => {\r\n    const {isLoggedIn} = useUsers();\r\n    const navigate = useNavigate();\r\n    const {ref, inView} = useInView({\r\n        threshold: 0.2,\r\n        triggerOnce: true\r\n    });\r\n\r\n    const toNftPage = () => {\r\n        if (!isLoggedIn) {\r\n            return toast.error('You need Log In to see details!', {\r\n                position: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: \"dark\",\r\n            });\r\n        };\r\n\r\n        navigate(`/nft/${_id}`)\r\n    }\r\n\r\n    const {imageUrl, title, price, author, _id} = nft;\r\n\r\n    return (\r\n        <NftItem ref={ref} show={inView} onClick={toNftPage}>\r\n            {/* <NftLink to={`/nft/${_id}`}> */}\r\n                {inView ? <ImageWrapper imageUrl={imageUrl} /> : <ImageSkeleton />}\r\n                <InfoWrapper>\r\n                    <Title>{title}</Title>\r\n                    <AuthorContainer>\r\n                        <Avatar src={author.avatarUrl} />\r\n                        <Author>{author.name}</Author>\r\n                    </AuthorContainer>\r\n                    <PricesWrapper>\r\n                        <PriceWrapper>\r\n                            <PriceTitle>Price</PriceTitle>\r\n                            <PriceValue>{price} ETH</PriceValue>\r\n                        </PriceWrapper>\r\n                        <PriceWrapper>\r\n                            <PriceTitle>Highest Bid</PriceTitle>\r\n                            <PriceValue>{price} wETH</PriceValue>\r\n                        </PriceWrapper>\r\n                    </PricesWrapper>\r\n                </InfoWrapper>\r\n            {/* </NftLink> */}\r\n        </NftItem>\r\n    )\r\n};","import { List, NoInfo } from \"./NftsList.styled\";\r\nimport { NftListItem } from \"./NftListItem/NftListItem\";\r\n\r\nexport const NftsList = ({nfts}) => {\r\n    return (\r\n        <>\r\n            {nfts.length > 0 ?\r\n                (<List>\r\n                    {nfts.map(nft => <NftListItem key={nft._id} nft={nft} />)}\r\n                </List>)\r\n            : <NoInfo>We have nothing here, yet..</NoInfo>}\r\n        </>\r\n    )\r\n};","export const getUsersNft = ({nfts}) => nfts.usersNft;\r\n\r\nexport const getAllNft = ({nfts}) => nfts.allNft;\r\n\r\nexport const getDetails = ({nfts}) => nfts.details;\r\n\r\nexport const getProfileNft = ({nfts}) => nfts.profileNft;\r\n\r\nexport const getAllCollections = ({nfts}) => nfts.allCollections;\r\n\r\nexport const getCollectionDetails = ({nfts}) => nfts.collectionDetails;\r\n\r\nexport const getNftsLoading = ({nfts}) => nfts.isLoading;\r\n\r\nexport const getHighlight = ({nfts}) => nfts.highlight;\r\n\r\nexport const getTrendingCollections = ({nfts}) => nfts.trendingCollections;\r\n\r\nexport const getTrendingNfts = ({nfts}) => nfts.trendingNfts;\r\n\r\nexport const getLoadingNft = ({nfts}) => nfts.isLoading;","import { useSelector } from \"react-redux\";\r\nimport {\r\n    getAllNft,\r\n    getUsersNft,\r\n    getDetails,\r\n    getProfileNft,\r\n    getTrendingCollections,\r\n    getHighlight,\r\n    getAllCollections,\r\n    getCollectionDetails,\r\n    getNftsLoading,\r\n    getTrendingNfts,\r\n    getLoadingNft\r\n} from \"../redux/nft/nftSelectors\";\r\n\r\nexport const useNfts = () => {\r\n    const usersNft = useSelector(getUsersNft);\r\n    const allNft = useSelector(getAllNft);\r\n    const nftDetails = useSelector(getDetails);\r\n    const profileNft = useSelector(getProfileNft);\r\n    const allCollections = useSelector(getAllCollections);\r\n    const collectionDetails = useSelector(getCollectionDetails);\r\n    const nftsLoading = useSelector(getNftsLoading);\r\n    const highlight = useSelector(getHighlight);\r\n    const trendingCollections = useSelector(getTrendingCollections);\r\n    const trendingNfts = useSelector(getTrendingNfts);\r\n    const isLoadingNfts = useSelector(getLoadingNft);\r\n\r\n    return {\r\n        usersNft,\r\n        allNft,\r\n        nftDetails,\r\n        highlight,\r\n        profileNft,\r\n        trendingCollections,\r\n        allCollections,\r\n        collectionDetails,\r\n        nftsLoading,\r\n        trendingNfts,\r\n        isLoadingNfts\r\n    };\r\n};","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","NoInfo","_templateObject2","p","theme","fontSizes","h3","lineHeights","NftItem","colors","main","radii","normal","show","ImageWrapper","imageUrl","ImageSkeleton","_templateObject3","InfoWrapper","_templateObject4","Title","_templateObject5","h5","fontWeights","bold","AuthorContainer","_templateObject6","Avatar","_templateObject7","round","Author","_templateObject8","fontFamily","secondary","PricesWrapper","_templateObject9","PriceWrapper","_templateObject10","PriceTitle","_templateObject11","caption","PriceValue","_templateObject12","body","NftListItem","_ref","nft","isLoggedIn","useUsers","navigate","useNavigate","_useInView","useInView","threshold","triggerOnce","ref","inView","title","price","author","_id","_jsxs","onClick","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","concat","children","_jsx","src","avatarUrl","name","NftsList","nfts","_Fragment","length","map","getUsersNft","usersNft","getAllNft","_ref2","allNft","getDetails","_ref3","details","getProfileNft","_ref4","profileNft","getAllCollections","_ref5","allCollections","getCollectionDetails","_ref6","collectionDetails","getNftsLoading","_ref7","isLoading","getHighlight","_ref8","highlight","getTrendingCollections","_ref9","trendingCollections","getTrendingNfts","_ref10","trendingNfts","getLoadingNft","_ref11","useNfts","useSelector","nftDetails","nftsLoading","isLoadingNfts","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","id","instance","thresholds","elements","observer","entries","forEach","entry","_elements$get","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","isPlainChildren","props","React","_state$entry","delay","rootMargin","skip","initialInView","onChange","_React$useState","_React$useState2","_slicedToArray","setRef","_React$useState3","_React$useState4","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}